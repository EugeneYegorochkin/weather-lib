!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("rxjs/operators"),require("rxjs"),require("@angular/common"),require("@angular/common/http"),require("@angular/forms"),require("@angular/platform-browser"),require("@angular/core"),require("highcharts")):"function"==typeof define&&define.amd?define("weather-lib",["exports","rxjs/operators","rxjs","@angular/common","@angular/common/http","@angular/forms","@angular/platform-browser","@angular/core","highcharts"],e):e(t["weather-lib"]={},t.rxjs.operators,t.rxjs,t.ng.common,t.ng.common.http,t.ng.forms,t.ng.platformBrowser,t.ng.core,t.Highcharts)}(this,function(t,n,r,e,o,a,i,s,c){"use strict";var p=function(t,e){return(p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};var u=function j(t,e,r,n,o,a,i,s,c){this.name=t,this.country=e,this.description=r,this.icon=n,this.temp=o,this.tempMax=a,this.tempMin=i,this.pressure=s,this.humidity=c},h=(l.prototype.getDataByCityName=function(t){return this.get(this.configUrl+"weather?q="+t+this.apiKey+this.units)},l.prototype.get=function(t){return this.http.get(t)},l.prototype.getDataByCityZip=function(t){return this.get(this.configUrl+"weather?zip="+t+this.apiKey+this.units)},l.prototype.getForecastByCityName=function(t){return this.get(this.configUrl+"forecast/daily?q="+t+this.apiKey+this.units)},l);function l(t,e){this.key=t,this.http=e,this.apiKey="&appid=de4ced2e2547330fcc10bc405dddc049",this.configUrl="http://api.openweathermap.org/data/2.5/"+this.key,this.units="&units=metric"}var m,d=function S(t,e){this.temp=t,this.data=e},f=(function W(t,e){function r(){this.constructor=t}p(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}(y,m=h),y.prototype.getDataByName=function(t){var e=this;return this.getDataByCityName(t).pipe(n.map(function(t){return e.mapWeather(t),e.currentWeather}),n.catchError(function(t){return e.errorMessage="",e.errorMessage="City not found. Please enter city or ZIP correctly",r.throwError(e.errorMessage)}))},y.prototype.getDataByZip=function(t){var e=this;return this.getDataByCityZip(t).pipe(n.map(function(t){return e.mapWeather(t),e.currentWeather}),n.catchError(function(t){return e.errorMessage="",e.errorMessage="City not found. Please enter city or ZIP correctly",r.throwError(e.errorMessage)}))},y.prototype.getForecastByName=function(t){var r=this;return this.getForecastByCityName(t).pipe(n.map(function(t){r.currentForecast.splice(0,r.currentForecast.length);for(var e=0;e<t.list.length;e++)r.currentForecast.push(new d(Math.round(t.list[e].temp.day),new Date(1e3*t.list[e].dt).getDate()+","+r.months[new Date(1e3*t.list[e].dt).getMonth()]));return r.currentForecast}))},y.prototype.mapWeather=function(t){this.currentWeather=new u(t.name,t.sys.country,t.weather[0].description,t.weather[0].icon,t.main.temp,t.main.temp_max,t.main.temp_min,t.main.pressure,t.main.humidity)},y.decorators=[{type:s.Injectable,args:[{providedIn:"root"}]}],y.ctorParameters=function(){return[{type:o.HttpClient}]},y.ngInjectableDef=s.defineInjectable({factory:function(){return new y(s.inject(o.HttpClient))},token:y,providedIn:"root"}),y);function y(t){var e=m.call(this,"",t)||this;return e.currentForecast=[],e.months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],e}var g=(v.prototype.getWeatherByName=function(t){return this.getDataService.getDataByName(t)},v.prototype.getWeatherByZip=function(t){return this.getDataService.getDataByZip(t)},v.prototype.getForecast=function(t){return this.getDataService.getForecastByName(t)},v.decorators=[{type:s.Injectable,args:[{providedIn:"root"}]}],v.ctorParameters=function(){return[{type:f}]},v.ngInjectableDef=s.defineInjectable({factory:function(){return new v(s.inject(f))},token:v,providedIn:"root"}),v);function v(t){this.getDataService=t}var b=(w.prototype.ngOnInit=function(){},w.prototype.onSubmit=function(t){var e=this;this.errorMessage="",this.city=t.value.city,isNaN(this.city)?this.getWeatherDataService.getWeatherByName(this.city).subscribe(function(t){e.weather=t},function(t){e.errorMessage=t}):(this.zip=this.city,this.getWeatherDataService.getWeatherByZip(this.zip).subscribe(function(t){e.weather=t},function(t){e.errorMessage=t})),t.reset()},w.decorators=[{type:s.Component,args:[{selector:"lib-weather-lib",template:'<nav class="navbar navbar-default">\r\n    <div class="container-fluid">\r\n        <div class="navbar-header">\r\n            <h3 class="navbar-brand">Forecast</h3>\r\n        </div>\r\n    </div>\r\n</nav>\r\n<div class="container">\r\n    <div class="row">\r\n        <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">\r\n            <form #f="ngForm" (ngSubmit)="onSubmit(f)">\r\n                <div class="form-group">\r\n                    <label for="city">City / ZIP</label>\r\n                    <div class="input-group">\r\n                        <input id="city" name="city" ngModel class="form-control"\r\n                            placeholder="Enter a city or a zip code" required ngModel>\r\n                        <span class="input-group-btn">\r\n                            <button class="btn btn-primary" type="submit" [disabled]="!f.valid">Search</button>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2" *ngIf="errorMessage">\r\n            <span style="color: red">{{errorMessage}}</span>\r\n        </div>\r\n    </div>\r\n    <hr>\r\n    <div class="row" *ngIf="weather && !errorMessage">\r\n        <div class="col-xs-12 col-sm-12 col-md-12">\r\n            <p class="text-center"><b>{{weather.name + \', \' + weather.country}}</b>\r\n                <img src="http://openweathermap.org/img/w/{{weather.icon}}.png" alt="icon"></p>\r\n        </div>\r\n        <div class="col-xs-12 col-sm-10 col-md-6">\r\n            <p class="text-center">{{weather.description |  titlecase}}</p>\r\n        </div>\r\n        <div class="col-xs-12 col-sm-10 col-md-6">\r\n            <p class="text-center">{{\'Temperature: \' +  weather.temp + \' C\' }}</p>\r\n        </div>\r\n        <div class="col-xs-12 col-sm-10 col-md-6">\r\n            <p class="text-center">{{\'Max Temperature: \' +  weather.tempMax + \' C\'}}</p>\r\n        </div>\r\n        <div class="col-xs-12 col-sm-10 col-md-6">\r\n            <p class="text-center">{{\'Min Temperature: \' +  weather.tempMin + \' C\'}}</p>\r\n        </div>\r\n        <div class="col-xs-12 col-sm-10 col-md-6">\r\n            <p class="text-center">{{\'Humidity: \' + weather.humidity + \'%\'}}</p>\r\n        </div>\r\n        <div class="col-xs-12 col-sm-10 col-md-6">\r\n            <p class="text-center">{{\'Pressure: \' + weather.pressure + \' hPa\'}}</p>\r\n        </div>\r\n    </div>\r\n    <div class="row" *ngIf="!errorMessage">\r\n        <div class="col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2">\r\n            <app-chart [currentCity]="city"></app-chart>\r\n        </div>\r\n    </div>\r\n</div>'}]}],w.ctorParameters=function(){return[{type:g}]},w);function w(t){this.getWeatherDataService=t}var x=require("highcharts/modules/boost"),M=require("highcharts/modules/no-data-to-display"),C=require("highcharts/highcharts-more");x(c),M(c),C(c),M(c);var F=(D.prototype.onGetForecast=function(){var r=this;this.weatherLibService.getForecast(this.currentCity).subscribe(function(t){r.currentData.splice(0,r.currentData.length),r.currentTemp.splice(0,r.currentTemp.length);for(var e=0;e<t.length;e++)r.currentData.push(t[e].data),r.currentTemp.push(t[e].temp);c.chart("container",r.chartOptions),r.showForecast=!0})},D.prototype.onCloseForecast=function(){this.showForecast=!1},D.prototype.ngOnInit=function(){},D.prototype.ngOnChanges=function(t){t.currentCity&&(this.showForecast=!1)},D.decorators=[{type:s.Component,args:[{selector:"app-chart",template:'<button class="btn btn-primary center-block" type="submit" (click)="onGetForecast()"\r\n    *ngIf="currentCity && !showForecast">7 day\r\n    forecast</button>\r\n<div id="container" class="{{showForecast? \'\': \'invisible\'}}"></div>\r\n<button class="btn btn-primary center-block closeForecastButton" type="button" *ngIf="showForecast"\r\n    (click)="onCloseForecast()">Close forecast</button>',styles:[".invisible{display:none}.closeForecastButton{margin-top:8px;margin-bottom:8px}"]}]}],D.ctorParameters=function(){return[{type:g}]},D.propDecorators={currentCity:[{type:s.Input}]},D);function D(t){this.weatherLibService=t,this.showForecast=!1,this.currentData=[],this.currentTemp=[],this.highcharts=c,this.chartOptions={title:{text:"Forecast"},xAxis:{categories:this.currentData},yAxis:{title:{text:"Temperature °C"}},tooltip:{valueSuffix:" °C"},series:[{name:"Temp",type:"column",data:this.currentTemp}]}}var B=(I.decorators=[{type:s.NgModule,args:[{declarations:[b,F],imports:[i.BrowserModule,e.CommonModule,o.HttpClientModule,a.FormsModule],exports:[b,i.BrowserModule,e.CommonModule,o.HttpClientModule,a.FormsModule]}]}],I);function I(){}t.WeatherLibService=g,t.WeatherLibComponent=b,t.WeatherLibModule=B,t.ɵb=h,t.ɵa=f,t.ɵc=F,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=weather-lib.umd.min.js.map